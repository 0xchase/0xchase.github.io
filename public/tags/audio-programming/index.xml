<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Audio Programming on Chase Kanipe</title>
    <link>http://localhost:1313/tags/audio-programming/</link>
    <description>Recent content in Audio Programming on Chase Kanipe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Nov 2023 00:00:02 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/audio-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementing an Open Source CMajor Compiler</title>
      <link>http://localhost:1313/writeups/compiler/</link>
      <pubDate>Sat, 04 Nov 2023 00:00:02 -0400</pubDate>
      <guid>http://localhost:1313/writeups/compiler/</guid>
      <description>Introduction Something here.</description>
    </item>
    <item>
      <title>Writing Elegant DSP Code in Rust</title>
      <link>http://localhost:1313/projects/rust-dsp/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:02 -0400</pubDate>
      <guid>http://localhost:1313/projects/rust-dsp/</guid>
      <description>Introduction In this post Iâ€™m going to attempt to show some of the advantages the rust type system brings to writing more elegant DSP code. We&amp;rsquo;re going to start with a crash course on the relevant parts of the rust type system, and then we&amp;rsquo;ll see how this can be applied to constructing the types and traits that will be the foundation of a Rust audio processing library. We&amp;rsquo;ll then see how to apply some more abstract features of the Rust type system to make these elements more composable and modular.</description>
    </item>
  </channel>
</rss>
